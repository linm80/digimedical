{"version":3,"sources":["components/common/react-notifications/index.js","views/user/login.js","helpers/IntlMessages.js","components/common/CustomBootstrap.js"],"names":["Notifications","Login","props","onUserLogin","values","loading","email","password","loginUser","history","validateEmail","value","error","test","validatePassword","length","state","this","NotificationManager","warning","initialValues","className","xxs","md","to","id","onSubmit","errors","touched","name","validate","type","color","size","Component","connect","authUser","user","injectIntl","withRef","Colxx","widths","Separator"],"mappings":"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","file":"static/js/user-login.573b75f6.chunk.js","sourcesContent":["import Notifications from './Notifications.js';\r\nimport NotificationContainer from './NotificationContainer';\r\nimport NotificationManager from './NotificationManager';\r\n\r\nexport { Notifications, NotificationContainer, NotificationManager };\r\nexport default Notifications;\r\n","import React, { Component } from \"react\";\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { NotificationManager } from \"../../components/common/react-notifications\";\r\nimport { Formik, Form, Field } from \"formik\";\r\n\r\nimport { loginUser } from \"../../redux/actions\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\"\r\n    };\r\n  }\r\n\r\n  onUserLogin = (values) => {\r\n    if (!this.props.loading) {\r\n      if (values.email !== \"\" && values.password !== \"\") {\r\n        this.props.loginUser(values, this.props.history);\r\n      }\r\n    }\r\n  }\r\n\r\n  validateEmail = (value) => {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Please enter your email address\";\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n      error = \"Invalid email address\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  validatePassword = (value) => {\r\n    let error;\r\n    if (!value) {\r\n      error = \"Please enter your password\";\r\n    } else if (value.length < 4) {\r\n      error = \"Value must be longer than 3 characters\";\r\n    }\r\n    return error;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.error) {\r\n      NotificationManager.warning(\r\n        this.props.error,\r\n        \"Login Error\",\r\n        3000,\r\n        null,\r\n        null,\r\n        ''\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { password, email } = this.state;\r\n    const initialValues = {email,password};\r\n\r\n    return (\r\n      <Row className=\"h-100\">\r\n        <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n          <Card className=\"auth-card\">\r\n            <div className=\"position-relative image-side \">\r\n              <p className=\"text-white h2\">DIGIMEDICAL VR PLATFORM</p>\r\n              <p className=\"white mb-0\">\r\n                Please use your email and password to login.\r\n                \r\n              </p>\r\n            </div>\r\n            <div className=\"form-side\">\r\n              <NavLink to={`/`} className=\"white\">\r\n                <span className=\"logo-single\" />\r\n              </NavLink>\r\n              <CardTitle className=\"mb-4\">\r\n                <IntlMessages id=\"user.login-title\" />\r\n              </CardTitle>\r\n\r\n              <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={this.onUserLogin}>\r\n                {({ errors, touched }) => (\r\n                  <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                    <FormGroup className=\"form-group has-float-label\">\r\n                      <Label>\r\n                        <IntlMessages id=\"user.email\" />\r\n                      </Label>\r\n                      <Field\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        validate={this.validateEmail}\r\n                      />\r\n                      {errors.email && touched.email && (\r\n                        <div className=\"invalid-feedback d-block\">\r\n                          {errors.email}\r\n                        </div>\r\n                      )}\r\n                    </FormGroup>\r\n                    <FormGroup className=\"form-group has-float-label\">\r\n                      <Label>\r\n                        <IntlMessages id=\"user.password\" />\r\n                      </Label>\r\n                      <Field\r\n                        className=\"form-control\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        validate={this.validatePassword}\r\n                      />\r\n                      {errors.password && touched.password && (\r\n                        <div className=\"invalid-feedback d-block\">\r\n                          {errors.password}\r\n                        </div>\r\n                      )}\r\n                    </FormGroup>\r\n                    <div className=\"d-flex justify-content-between align-items-center\">\r\n                      <NavLink to={`/user/forgot-password`}>\r\n                        <IntlMessages id=\"user.forgot-password-question\" />\r\n                      </NavLink>\r\n                      <Button\r\n                        color=\"primary\"\r\n                        className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\r\n                        size=\"lg\"\r\n                      >\r\n                        <span className=\"spinner d-inline-block\">\r\n                          <span className=\"bounce1\" />\r\n                          <span className=\"bounce2\" />\r\n                          <span className=\"bounce3\" />\r\n                        </span>\r\n                        <span className=\"label\"><IntlMessages id=\"user.login-button\" /></span>\r\n                      </Button>\r\n                    </div>\r\n\r\n\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n            </div>\r\n          </Card>\r\n        </Colxx>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({ authUser }) => {\r\n  const { user, loading, error } = authUser;\r\n  return { user, loading, error };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    loginUser\r\n  }\r\n)(Login);\r\n","import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = props => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n    withRef: false\r\n});\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }"],"sourceRoot":""}