{"version":3,"sources":["components/common/react-notifications/index.js","views/user/reset-password.js","helpers/IntlMessages.js","components/common/CustomBootstrap.js"],"names":["Notifications","ResetPassword","props","onResetPassword","values","loading","oobCode","URLSearchParams","location","search","get","newPassword","resetPassword","resetPasswordCode","history","NotificationManager","warning","validateNewPassword","newPasswordAgain","errors","state","this","error","success","initialValues","className","xxs","md","to","id","validate","onSubmit","touched","name","type","color","size","Component","connect","authUser","injectIntl","withRef","Colxx","widths","Separator"],"mappings":"gHAAA,gEAKeA,EAAf,G,mNCKMC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,gBAAkB,SAACC,GACf,IAAK,EAAKF,MAAMG,QAAS,CACrB,IACMC,EADS,IAAIC,gBAAgB,EAAKL,MAAMM,SAASC,QAChCC,IAAI,WACvBJ,EAC2B,KAAvBF,EAAOO,aACP,EAAKT,MAAMU,cAAc,CAAED,YAAaP,EAAOO,YAAaE,kBAAmBP,EAASQ,QAAS,EAAKZ,MAAMY,UAGhHC,IAAoBC,QAChB,+BACA,uBACA,IACA,KACA,KACA,MAvBG,EA8BnBC,oBAAsB,SAACb,GAAY,IACvBO,EAAkCP,EAAlCO,YAAaO,EAAqBd,EAArBc,iBACjBC,EAAS,GAIb,OAHID,GAAoBP,IAAgBO,IACpCC,EAAOD,iBAAmB,kCAEvBC,GAlCP,EAAKC,MAAQ,CACTT,YAAa,GACbO,iBAAkB,IAJP,E,kFAwCXG,KAAKnB,MAAMoB,MACXP,IAAoBC,QAChBK,KAAKnB,MAAMoB,MACX,wBACA,IACA,KACA,KACA,IAGCD,KAAKnB,MAAMG,SAAsC,YAA3BgB,KAAKnB,MAAMS,aAClCI,IAAoBQ,QAChB,uCACA,yBACA,IACA,KACA,KACA,M,+BAON,IAAD,SACqCF,KAAKD,MACzCI,EAAgB,CAAEb,YAFnB,EACGA,YAC6BO,iBAFhC,EACgBA,kBAGrB,OACI,kBAAC,IAAD,CAAKO,UAAU,SACX,kBAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,KAAKF,UAAU,mBAC9B,kBAAC,IAAD,CAAMA,UAAU,aACZ,yBAAKA,UAAU,iCACX,uBAAGA,UAAU,iBAAb,2BACA,uBAAGA,UAAU,cAAb,kDACmD,+BAIvD,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAASG,GAAE,IAAOH,UAAU,SACxB,0BAAMA,UAAU,iBAEpB,kBAAC,IAAD,CAAWA,UAAU,QACjB,kBAAC,IAAD,CAAcI,GAAG,yBAGrB,kBAAC,IAAD,CACIC,SAAUT,KAAKJ,oBACfO,cAAeA,EACfO,SAAUV,KAAKlB,kBACd,gBAAGgB,EAAH,EAAGA,OAAQa,EAAX,EAAWA,QAAX,OACG,kBAAC,IAAD,CAAMP,UAAU,mCACZ,kBAAC,IAAD,CAAWA,UAAU,8BACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcI,GAAG,uBAErB,kBAAC,IAAD,CACIJ,UAAU,eACVQ,KAAK,cACLC,KAAK,cAGb,kBAAC,IAAD,CAAWT,UAAU,8BACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcI,GAAG,6BAErB,kBAAC,IAAD,CACIJ,UAAU,eACVQ,KAAK,mBACLC,KAAK,aAERf,EAAOD,kBAAoBc,EAAQd,kBAChC,yBAAKO,UAAU,4BACVN,EAAOD,mBAKpB,yBAAKO,UAAU,qDACX,kBAAC,IAAD,CAASG,GAAE,eACP,kBAAC,IAAD,CAAcC,GAAG,sBAErB,kBAAC,IAAD,CACIM,MAAM,UACNV,UAAS,wCAAmC,EAAKvB,MAAMG,QAAU,eAAiB,IAClF+B,KAAK,MAEL,0BAAMX,UAAU,0BACZ,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,YAChB,0BAAMA,UAAU,aAEpB,0BAAMA,UAAU,SAAQ,kBAAC,IAAD,CAAcI,GAAG,8C,GAtI7DQ,aAyJbC,uBALS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEvB,MAAO,CAAE5B,YADkD4B,EAAnD5B,YACcE,kBADqC0B,EAAtC1B,kBACoBR,QADkBkC,EAAnBlC,QACUiB,MADSiB,EAAVjB,SAMjD,CACIV,mBAHO0B,CAKbrC,I,gCCxKF,4BAKeuC,iBAFO,SAAAtC,GAAK,OAAI,kBAAC,IAAqBA,KAEZ,CACrCuC,SAAS,K,gCCNb,iGAEMC,EAAQ,SAACxC,GAAD,OACV,kBAAC,IAAD,iBAASA,EAAT,CAAgByC,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,WAE5DC,EAAY,SAAC1C,GAAD,OACd,yBAAKuB,UAAS,oBAAevB,EAAMuB","file":"static/js/user-reset-password.5499d2d5.chunk.js","sourcesContent":["import Notifications from './Notifications.js';\r\nimport NotificationContainer from './NotificationContainer';\r\nimport NotificationManager from './NotificationManager';\r\n\r\nexport { Notifications, NotificationContainer, NotificationManager };\r\nexport default Notifications;\r\n","import React, { Component } from \"react\";\r\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { Colxx } from \"../../components/common/CustomBootstrap\";\r\nimport IntlMessages from \"../../helpers/IntlMessages\";\r\nimport { resetPassword } from \"../../redux/actions\";\r\nimport { NotificationManager } from \"../../components/common/react-notifications\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass ResetPassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newPassword: '',\r\n            newPasswordAgain: ''\r\n        };\r\n    }\r\n\r\n    onResetPassword = (values) => {\r\n        if (!this.props.loading) {\r\n            const params = new URLSearchParams(this.props.location.search);\r\n            const oobCode = params.get('oobCode');\r\n            if (oobCode) {\r\n                if (values.newPassword !== \"\") {\r\n                    this.props.resetPassword({ newPassword: values.newPassword, resetPasswordCode: oobCode, history: this.props.history });\r\n                }\r\n            } else {\r\n                NotificationManager.warning(\r\n                    \"Please check your email url.\",\r\n                    \"Reset Password Error\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    ''\r\n                );\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    validateNewPassword = (values) => {\r\n        const { newPassword, newPasswordAgain } = values;\r\n        let errors = {};\r\n        if (newPasswordAgain && newPassword !== newPasswordAgain) {\r\n            errors.newPasswordAgain = \"Please check your new password\";\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.error) {\r\n            NotificationManager.warning(\r\n                this.props.error,\r\n                \"Forgot Password Error\",\r\n                3000,\r\n                null,\r\n                null,\r\n                ''\r\n            );\r\n        } else {\r\n            if (!this.props.loading && this.props.newPassword === \"success\")\r\n                NotificationManager.success(\r\n                    \"Please login with your new password.\",\r\n                    \"Reset Password Success\",\r\n                    3000,\r\n                    null,\r\n                    null,\r\n                    ''\r\n                );\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { newPassword, newPasswordAgain } = this.state;\r\n        const initialValues = { newPassword, newPasswordAgain };\r\n\r\n        return (\r\n            <Row className=\"h-100\">\r\n                <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\r\n                    <Card className=\"auth-card\">\r\n                        <div className=\"position-relative image-side \">\r\n                            <p className=\"text-white h2\">DIGIMEDICAL VR Platform</p>\r\n                            <p className=\"white mb-0\">\r\n                                Please use your e-mail to reset your password. <br />\r\n                                \r\n              </p>\r\n                        </div>\r\n                        <div className=\"form-side\">\r\n                            <NavLink to={`/`} className=\"white\">\r\n                                <span className=\"logo-single\" />\r\n                            </NavLink>\r\n                            <CardTitle className=\"mb-4\">\r\n                                <IntlMessages id=\"user.reset-password\" />\r\n                            </CardTitle>\r\n\r\n                            <Formik\r\n                                validate={this.validateNewPassword}\r\n                                initialValues={initialValues}\r\n                                onSubmit={this.onResetPassword}>\r\n                                {({ errors, touched }) => (\r\n                                    <Form className=\"av-tooltip tooltip-label-bottom\">\r\n                                        <FormGroup className=\"form-group has-float-label\">\r\n                                            <Label>\r\n                                                <IntlMessages id=\"user.new-password\" />\r\n                                            </Label>\r\n                                            <Field\r\n                                                className=\"form-control\"\r\n                                                name=\"newPassword\"\r\n                                                type=\"password\"\r\n                                            />\r\n                                        </FormGroup>\r\n                                        <FormGroup className=\"form-group has-float-label\">\r\n                                            <Label>\r\n                                                <IntlMessages id=\"user.new-password-again\" />\r\n                                            </Label>\r\n                                            <Field\r\n                                                className=\"form-control\"\r\n                                                name=\"newPasswordAgain\"\r\n                                                type=\"password\"\r\n                                            />\r\n                                            {errors.newPasswordAgain && touched.newPasswordAgain && (\r\n                                                <div className=\"invalid-feedback d-block\">\r\n                                                    {errors.newPasswordAgain}\r\n                                                </div>\r\n                                            )}\r\n                                        </FormGroup>\r\n\r\n                                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                                            <NavLink to={`/user/login`}>\r\n                                                <IntlMessages id=\"user.login-title\" />\r\n                                            </NavLink>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                className={`btn-shadow btn-multiple-state ${this.props.loading ? \"show-spinner\" : \"\"}`}\r\n                                                size=\"lg\"\r\n                                            >\r\n                                                <span className=\"spinner d-inline-block\">\r\n                                                    <span className=\"bounce1\" />\r\n                                                    <span className=\"bounce2\" />\r\n                                                    <span className=\"bounce3\" />\r\n                                                </span>\r\n                                                <span className=\"label\"><IntlMessages id=\"user.reset-password-button\" /></span>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        </div>\r\n                    </Card>\r\n                </Colxx>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ authUser }) => {\r\n    const { newPassword, resetPasswordCode, loading, error } = authUser;\r\n    return { newPassword, resetPasswordCode, loading, error };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        resetPassword\r\n    }\r\n)(ResetPassword);\r\n\r\n","import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst InjectMassage = props => <FormattedMessage {...props} />;\r\n\r\nexport default injectIntl(InjectMassage, {\r\n    withRef: false\r\n});\r\n","import React from 'react';\r\nimport { Col } from 'reactstrap';\r\nconst Colxx = (props) => (\r\n    <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\r\n);\r\nconst Separator = (props) => (\r\n    <div className={`separator ${props.className}`}></div>\r\n);\r\nexport { Colxx,Separator }"],"sourceRoot":""}